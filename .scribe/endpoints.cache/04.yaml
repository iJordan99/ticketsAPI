## Autogenerated by Scribe. DO NOT MODIFY.

name: Engineer
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/v1/engineer/tickets
    metadata:
      groupName: Engineer
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Get authenticated engineer's assigned tickets"
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      sort:
        name: sort
        description: 'Data field(s) to sort by. Separate multiple fields with commas. Denote descending sort with a minus sign.'
        required: false
        example: 'sort=title,-createdAt'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'filter[status]':
        name: 'filter[status]'
        description: 'Filter by status code: A, C, H, X.'
        required: false
        example: null
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      'filter[title]':
        name: 'filter[title]'
        description: 'Filter by title. Wildcards are supported. No-Example'
        required: false
        example: modi
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      include:
        name: include
        description: 'Return resource with included relationship: Author, Engineer.'
        required: false
        example: Author
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      sort: 'sort=title,-createdAt'
      'filter[title]': modi
      include: Author
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"error":{"type":"AuthenticationException","status":401,"message":"Unauthenticated."}}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 8|skv9ZvzuDtoAWB8TktWjVSqj0ksvzJUVxODjp5UT7f50dd36'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/engineer/{engineer_user_id}/tickets'
    metadata:
      groupName: Engineer
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Get an engineer's assigned tickets"
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      engineer_user_id:
        name: engineer_user_id
        description: 'The ID of the engineer user.'
        required: true
        example: 11
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      user_id:
        name: user_id
        description: 'The id of the engineer.'
        required: true
        example: 11
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      engineer_user_id: 11
      user_id: 11
    queryParameters:
      sort:
        name: sort
        description: 'Data field(s) to sort by. Separate multiple fields with commas. Denote descending sort with a minus sign.'
        required: false
        example: 'sort=title,-createdAt'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'filter[status]':
        name: 'filter[status]'
        description: 'Filter by status code: A, C, H, X.'
        required: false
        example: null
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      'filter[title]':
        name: 'filter[title]'
        description: 'Filter by title. Wildcards are supported.'
        required: false
        example: null
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      include:
        name: include
        description: 'Return resource with included relationship: Author, Engineer.'
        required: false
        example: Author
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      sort: 'sort=title,-createdAt'
      include: Author
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"error":{"type":"AuthenticationException","status":401,"message":"Unauthenticated."}}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 8|skv9ZvzuDtoAWB8TktWjVSqj0ksvzJUVxODjp5UT7f50dd36'
    controller: null
    method: null
    route: null
    custom: []
